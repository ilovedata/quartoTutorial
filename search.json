[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto를 사용한 한글책 제작의 기초",
    "section": "",
    "text": "서문\n이 책은 Quarto 를 이용하여 한글책을 만들고 출판하는 간략한 방법과 팀을 설명합니다."
  },
  {
    "objectID": "index.html#개요",
    "href": "index.html#개요",
    "title": "Quarto를 사용한 한글책 제작의 기초",
    "section": "개요",
    "text": "개요\nQuarto는 출판물을 생성하기 위한 오픈 소스 도구이며, Markdown 기반으로 작성된 문서를 PDF, MS WORD 화일, 웹사이트 등 다양한 형식으로 변환할 수 있습니다.\nQuarto는 다양한 프로그래밍 언어(R, python, julia 등)를 사용하여 작성된 문서를 처리하는 기능과 코드의 실행 및 결과 통합을 지원하여 데이터 분석 및 보고서 작성에 특히 유용합니다."
  },
  {
    "objectID": "source/layout.html#개요",
    "href": "source/layout.html#개요",
    "title": "1  책의 구성요소",
    "section": "1.1 개요",
    "text": "1.1 개요"
  },
  {
    "objectID": "source/layout.html#html",
    "href": "source/layout.html#html",
    "title": "1  책의 구성요소",
    "section": "1.2 HTML",
    "text": "1.2 HTML"
  },
  {
    "objectID": "source/layout.html#pdf",
    "href": "source/layout.html#pdf",
    "title": "1  책의 구성요소",
    "section": "1.3 PDF",
    "text": "1.3 PDF"
  },
  {
    "objectID": "source/layout.html#ms-word",
    "href": "source/layout.html#ms-word",
    "title": "1  책의 구성요소",
    "section": "1.4 MS-WORD",
    "text": "1.4 MS-WORD"
  },
  {
    "objectID": "source/math.html#개요",
    "href": "source/math.html#개요",
    "title": "2  수학 기호",
    "section": "2.1 개요",
    "text": "2.1 개요"
  },
  {
    "objectID": "source/math.html#한글-수식",
    "href": "source/math.html#한글-수식",
    "title": "2  수학 기호",
    "section": "2.2 한글 수식",
    "text": "2.2 한글 수식\n부부_{ij}^2 = \\int 엄마_{ij}^2 + 아빠_{ij}^2 \n\\[\n부부_{ij}^2 = \\int 엄마_{ij}^2 + 아빠_{ij}^2\n\\]"
  },
  {
    "objectID": "source/math.html#html",
    "href": "source/math.html#html",
    "title": "2  수학 기호",
    "section": "2.3 HTML",
    "text": "2.3 HTML\nmathjax 에서 매크로 이용은 사이트 참조\n\n2.3.1 새로운 명령어\ninclude-in-header:\n      - text: |\n          &lt;script type=\"text/javascript\"&gt;\n           window.MathJax = {\n            tex: {\n              macros: {\n              RR: '{\\\\bf R}',                    // a simple string replacement\n              hatmat:'{\\\\pmb X ({\\\\pmb X}^t {\\\\pmb X} )^{-1} {\\\\pmb X}^t}',\n              bold: ['\\\\boldsymbol{#1}',1] ,     // this macro has one parameter\n              pardiff: ['\\\\frac{\\\\partial#2}{\\\\partial#1}', 2, 'x'], // this macro has an optional parameter that defaults to 'x'\n              pardifftwo: ['\\\\frac{\\\\partial#1}{\\\\partial#2}', 2]\n            }\n           }\n          };\n          &lt;/script&gt;\n\\[ \\pmb X + {\\pmb \\Sigma} + \\Sigma =  \\RR =\\pardiff{f} = \\pardifftwo{f}{\\theta} = \\pardiff[\\theta]{f} = \\pmb \\theta = \\hatmat = \\pmb \\theta \\]\n$$ \\pmb X + {\\pmb \\Sigma} + \\Sigma =  \\RR =\\pardiff{f} = \\pardifftwo{f}{\\theta} = \\pardiff[\\theta]{f} = \\pmb \\theta = \\hatmat = \\pmb \\theta $$\n\\[ \\begin{braced} \\frac{x}{y} \\end{braced} +  \\frac{x}{y} \\]"
  },
  {
    "objectID": "source/math.html#pdf",
    "href": "source/math.html#pdf",
    "title": "2  수학 기호",
    "section": "2.4 PDF",
    "text": "2.4 PDF"
  },
  {
    "objectID": "source/publish.html#사전-작업",
    "href": "source/publish.html#사전-작업",
    "title": "3  Quarto 의 출판 절차",
    "section": "3.1 사전 작업",
    "text": "3.1 사전 작업\n\n먼저 Quarto 를 설치한다. 설치는 Quarto 시작페이지를 참고하자.\nRstudio 또는 Vscode 를 이용하여 로컬 폴더에 Quarto book 프로젝트를 생성한다.\n\n\n참고로 Git 프로그램은 설치되어 있다고 가정하며 설치가 안됐으면 터미널에서 Git 를 사용할 수 있도록 설치한다.\n\n\n\n\n\n\n\nTip\n\n\n\nGithub 계정이 있다고 가정한다. Github 계정이 없다면 github.com에서 계정을 만든다.\n로컬 저장소를 github 에 push 하는 경우 personal access token을 만들어서 password 에 입력해야 한다. 자세한 poersonal access token 생성 과정은 여기 를 참조하세요."
  },
  {
    "objectID": "source/publish.html#git-의-로컬-및-원격-저장소-생성",
    "href": "source/publish.html#git-의-로컬-및-원격-저장소-생성",
    "title": "3  Quarto 의 출판 절차",
    "section": "3.2 Git 의 로컬 및 원격 저장소 생성",
    "text": "3.2 Git 의 로컬 및 원격 저장소 생성\n\n\n\n\n\n\nTip\n\n\n\nGit 저장소를 구성하기 전에 Git 가 관리할 필요가 없는 화일들을 정하고 .gitignore 파일에 넣어 주어야 한다. 이 작업은 Git 초기화 작업 이전에 수행하는 것이 좋다.\n자신의 프로젝트에서 사용할 언어에 맞게 .gitignore 화일을 먼저 구성하여 프로젝트 촐더에 미리 저장하는 것이 좋다. 다양한 언어에 대한 예제 .gitignore 화일들은 여기 에서 찾을 수 있다.\n\n\n이제 git 환경을 구성하고 github 의 원격저장소에 올린다\n\n터미널을 열고 프로젝트 화일들이 있는 폴더로 이동한다.\n다음과 같은 명령으로 git 저장소를 초기화한다.\n만약 Git 버전 2.28.0 또는 그 이상을 사용한다면:\ngit init -b main\n만약 Git 버전 2.27.1 또는 그 이하를 사용한다면:\ngit init && git symbolic-ref HEAD refs/heads/main\n다음에 다음과 같은 명령으로 저장소의 변경 내용을 추가하고 커밋한다.\ngit add .\ngit commit -m \"First commit\"\n이제 Github 계정에서 원격 저장소를 만든다. 만드는 방법은 Github 안내서를 참조하여 만들면 된다. 이 경우 README 화일은 만들지 않으며 로컹 저장소에서 만들어서 나중에 원격저장소에 올린다.\nGithub에서 원격 저장소를 만든 후에 저장소의 주소를 복사한다.\n터미날로 돌아가서 로컬 저장소가 있는 폴더에서 다음 명령을 입력한다.\ngit remote add origin &lt;REMOTE_URL&gt;\n프로젝트 폴더에서 커밋한 화일을 github의 원격 저장소에 push 하자.\ngit push -u origin main\n\n이제 github의 원격 저장소에 가면 커밋한 화일들이 원격 저장소에 올려진 것을 확인할 수 있다.\n\n위에서 설명한 내용들은 Github 안내서를 참조하였다.\n참고로 github 에 먼저 원격 저장소를 만들고 로컬 저장소에 클론(clone)하는 방법도 있다. 로컬에서 프로젝트 화일들을 어느 정도 만든 뒤에 원격 저장소에 올라는 것이 프로젝트를 일반적인 절차이므로 위의 방법을 제사하였다. 만약 github 에 먼저 원격 저장소를 만들고 로컬 저장소에 클론하려면 Github 안내서를 참조하면 된다.\n\n\n\n\n\n\n\nTip\n\n\n\nGit 로 화일을 관리하는 도중에 관리할 필요가 없는 새로운 화일이 생겨서 .gitignore 파일에 넣어 주고 적용할 경우가 생긴다.\n먼저 .gitignore 파일에 관리할 필요가 없는 화일들을 추가해 주고 다음 명령어를 실행한다.\ngit rm -r --cached .\n위의 명령이 실행되면 다시 화일들의 변경을 추가하고 커밋한다.\ngit add .\ngit commit -m \"apply change in .gitignore\""
  },
  {
    "objectID": "source/publish.html#출판",
    "href": "source/publish.html#출판",
    "title": "3  Quarto 의 출판 절차",
    "section": "3.3 출판",
    "text": "3.3 출판\nQuarto 로 제작한 웹사이트나 책을 Github Page 에 웹사이트 형태로 출판하는 방법은 아래와 같이 3가지가 있다.\n\n사이트를 로컬에서 만들고 원격 저장소에 옮기고 github 에서 출한하는 방법\nquarto publish 명령문을 사용하느 방법\nGithub Action 을 이용하는 방법\n\n이 책에서는 quarto publish 와 github action 을 이용하는 방법에 대하여 설명한다.\n\nquarto publishgithub action\n\n\n다음의 설명하는 절차는 Quarto 설명서 를 참조하였다.\n\n먼저 해야할 일\n\n_quarto.yml 의 format: html: 옵션에서 embed-resources: false 로 지정하는 것이 좋다.\nmain branch 에서 모든 것을 commit 한다.\nbuild 의 결과를 저장하는 폴더를 .gitignore 에 추가 /.quarto/     /_site/\n\ngh-pages branch 를 로컬 저장소에 만든다. 다음과 같은 명령어로 gh-pages branch 를 만든다.\ngit checkout --orphan gh-pages\ngit reset --hard # make sure you've committed changes before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\nGithub 의 원격 저장소로 이동하여 Settongs -&gt; Page 메뉴로 이동하여 다은 그림과 같이 Source 는 Deloy from a branch, Branch 는 gh-page 와 /(root) 로 지정되어 있는지 확인한다.\n\n\n\n\nGithub 의 원격 저장소의 Page 설정\n\n\n\n다시 main 저장소로 돌아간다.\ngit checkout main\nQuarto 의 publish 명령을 이용하여 사이트를 만든다\nquarto publish gh-pages\n\n주의 : -quarto.yaml 에 있는 모든 format 을 publish 하기 때문에 모든 format 이 오류없이 실행되게 하거나 html 만 실행하도록 만든다.\n\n이후에는 변경된 화일을 커밋하고 다시 publish 하면 됨\n\n\n\n\n먼저 프로젝트 _quarto.yml 에 다음과 같이 추가하여 로컬에서만 프로그램이 실행되도록 만든다.\n\nexecute:\n  freeze: auto\n\n다시 rendering 을 한다.\n\nquarto render"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "\\[ 1+ 1 \\]"
  }
]